#!/usr/bin/env bash
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

export DOTFILES_ROOT=$DOTFILES_ROOT
set -e

echo ''

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
   
  if [ "$skip_all" == "false" ]
  then 
    if [ -n "$1" ]
    then 
        git_profile=$1
    else
        git_profile='local'
    fi 
    
    if ! [ -f "~/.gitconfig.$git_profile" ]
        then
        if ! [ -f git/gitconfig."$git_profile".symlink ]
        then
            info 'setup gitconfig'

            git_credential='cache'
            if [ "$(uname -s)" == "Darwin" ]
            then
                git_credential='osxkeychain'
            fi

            user " - What is your github author name for $git_profile?"
            read -e git_authorname
            user " - What is your github author email for $git_profile?"
            read -e git_authoremail

            sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.$git_profile.symlink

            success 'gitconfig'
        fi 
    fi
  fi 
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"

        if [[ -z "$action" ]]; then
          read -n 1 action
        fi

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$src" "$dst"
    success "linked $src to $dst"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    if [ -d "$src" ]; then
        if [ ! -L "$HOME/.$(basename "${src%.*}")" ]; then
            for file in $(find -H "$src" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
            do
                #dst=$HOME/.$(basename "${src%.*}")/$(basename ${file%.*})
                dst=$HOME/.$(basename "${src%.*}")
                link_file "$file" "$dst"
            done
            continue
        else
            continue
        fi
    fi
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

displayUsageAndExit() {
    echo "dot -- dotfiles bootstrap"
    echo ""
    echo "Usage: bootstrap [options]"
    echo ""
    echo "Options:"
    echo " -O Overwrite All"
    echo " -B Backup All"
    echo " -S Skip ALL"
    echo " -h, --help Show this message and exit"
    exit
}


while test $# -gt 0; do
    case "$1" in
        "-h"|"--help")
            displayUsageAndExit
            ;;
        "-O")
            action="O"
            ;;
        "-B")
            action="B"
            ;;
        "-S")
            action="S"
            ;;
        *)
            echo "Invalid option: $1"
            displayUsageAndExit
            ;;
    esac
    shift
done


setup_gitconfig $1
install_dotfiles

# If the .bashrc isn't linked then it won't load the dotfiles.
# Manually load in current .bashrc
if [ ! -L $HOME/.bashrc ]
then
    echo "export DOTFILES_ROOT=$DOTFILES_ROOT" >> $HOME/.bashrc
    echo "source $DOTFILES_ROOT/script/dotfiles.sh" >> $HOME/.bashrc
fi 


# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Linux" ]
then
  info "installing dependencies"
  if source bin/dot | while read -r data; do info "$data"; done
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
