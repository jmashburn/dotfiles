"$schema" = "https://jj-vcs.github.io/jj/latest/config-schema.json"

[user]
name = "Jared"
email = "jaredmash@gmail.com"

[ui]
default-command = "log"
pager = ["less", "-FRX"]
diff-editor = ":builtin"
diff-formatter = "git"
merge-editor = "vscode"
log-synthetic-elided-nodes = true
should-sign-off = true

[git]
#private-commits = "private()"
auto-local-bookmark = false
#push-bookmark-prefix = "jmashburn/push-"
private-commits = 'blacklist()'
#colocate = true
write-change-id-header = true



[revset-aliases]
"p(n)" = "p(@, n)"
"p(r, n)" = "roots(r | ancestors(r-, n))"
"local_log(trunk)" = "ancestors((p(trunk, 4) | immutable_heads()).. | present(@), 2)"

# Useful on Windows. Technically conflicts with any bookmark/tag named 'at', but
# seems OK...
'at' = '@'

# FIXME (upstream): should this be upstream?
'user(x)' = 'author(x) | committer(x)'
'mine()' = 'user("aseipp@pobox.com") | user("austin@ersc.io")'

# By default, show the repo trunk, the remote bookmarks, and all remote tags. We
# don't want to change these in most cases, but in some repos it's useful.
'immutable_heads()' = 'present(trunk()) | untracked_remote_bookmarks() | tags()'

# Useful to ignore this, in many repos. For repos like `jj` these are
# consistently populated with a bunch of auto-generated commits, so ignoring it
# is often nice.
'gh_pages()' = 'ancestors(remote_bookmarks(exact:"gh-pages"))'

# Private and WIP commits that should never be pushed anywhere. Often part of
# work-in-progress merge stacks.
'wip()' = 'description(glob:"wip:*")'
'private()' = 'description(glob:"private:*")'
'blacklist()' = 'wip() | private()'

# stack(x, n) is the set of mutable commits reachable from 'x', with 'n'
# parents. 'n' is often useful to customize the display and return set for
# certain operations. 'x' can be used to target the set of 'roots' to traverse,
# e.g. @ is the current stack.
'stack()' = 'stack(@)'
'stack(x)' = 'stack(x, 2)'
'stack(x, n)' = 'ancestors(reachable(x, mutable()), n)'

# The current set of "open" works. It is defined as: all stacks that are
# reachable from my working copy, or any other commit I wrote.
# n = 1, meaning that nothing from `trunk()` is included, so all resulting
# commits are mutable by definition.
'open()' = 'stack(mine() | @, 1)'

# the set of 'ready()' commits. defined as the set of open commits, but nothing
# that is blacklisted or any of their children.
#
# often used with gerrit, which you can use to submit whole stacks at once:
#
# - jj gerrit send -r 'ready()' --dry-run
'ready()' = 'open() ~ descendants(blacklist())'

# Find the megamerge. Mostly useful in combination with other aliases, primarily
# 'sandwich'. Normally when there's only one megamerge, sandwich works perfectly
# fine and is basically "magic". However, there are more complex cases; consider
# something like this which represents a forked repository of an upstream:
#
#
#    ----> P1 ... Pn -----------\
#   /                            \
#  /---> X --\           (main)   \
# B          M1 --> T1 ... Tn --> M2 --> @
#  \---> Y --/
#
# X and Y are typical features on top of base B, combined inside megamerge M1.
# However, we may want changes T1...Tn to go on top of M1, because (in my case)
# they're custom and will never go upstream, but are correctly published as part
# of the fork; Tn is where the main bookmark points. Finally, we have changes P1
# ... Pn which are private and should never be pushed upstream at all.
# 
# In this case, sandwich will fail because 'reachable(stack(), merges())' will
# resolve to {M1, M2}, which is an invalid argument for 'rebase -B' due to not
# having an all: prefix modifier. So to handle that case, we allow the user
# to either specify the merge via literal tag "megamerge". In this case if we
# 'bookmark set megamerge -r M1' then sandwich will always work correctly.
'megamerge()' = 'coalesce(present(megamerge), reachable(stack(), merges()))'



[aliases]
trunk = ["log", "-r", "::trunk()"]

stack = ["log", "-r", "ancestors((trunk()..@)::bookmarks() | @, 2)"]

rebase-all = ["rebase", "-s", "all:roots(trunk()..mutable())", "-d", "trunk()"]


# "New Trunk"
nt = ["new", "trunk()"]

# Shorter (and thus better) names, IMO
credit = ["file", "annotate"]
cat = ["file", "show"]

# TODO FIXME (aseipp): is this a better name?
streamline = ["simplify-parents"]

# Find the closest ancestor with a bookmark pointing at it, and move it to the
# parent of the working copy.
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]

# Get all open stacks of work
open = ["log", "-r", "open()"]

# Retrunk revisions. Typically as `jj retrunk -s ...` -- notably can be used
# with open:
# - jj retrunk -s 'all:roots(open())'
retrunk = ["rebase", "-d", "trunk()"]

# Retrunk the current stack of work.
reheat = ["rebase", "-d", "trunk()", "-s", "all:roots(trunk()..stack(@))"]

# 'jj sandwich xyz' to move xyz into the megamerge in parallel to everything
# else. See notes on 'megamerge()' above for how it's resolved.
sandwich = [ "rebase", "-B", "megamerge()", "-A", "trunk()", "-r"]

# Take content from any change, and move it into @. The inverse of 'eject'
# - jj consume xyz path/to/file`
consume = ["squash", "--into", "@", "--from"]

# Eject content from @ into any other change. The inverse of 'consume'
# - jj eject xyz --interactive
eject = ["squash", "--from", "@", "--into"]

# EXPERIMENTAL: ultra-generalized command that subsumes both 'diff' and 'show'
examine = ["log", "-T", "builtin_log_detailed", "-p", "-r"]


[colors]
# Base customizations
"normal change_id" = { bold = true, fg = "magenta" }
"immutable change_id" = { bold = false, fg = "bright cyan" }

# Used by log node template
"node" = { bold = true }
"node elided" = { fg = "bright black" }
"node working_copy" = { fg = "green" }
"node conflict" = { fg = "red" }
"node immutable" = { fg = "bright cyan" }
"node wip" = { fg = "yellow" }
"node normal" = { bold = false }

# Used in other various templates
"text link" = { bold = true, fg = "magenta" }
"text warning" = { bold = true, fg = "red" }


[templates]
op_log_node = 'if(current_operation, "@", "💲")'
log_node = '''
label("node",
  coalesce(
    if(!self, label("elided", "⇋")),
    if(current_working_copy, label("working_copy", "💲")),
    if(conflict, label("conflict", "❌")),
    if(immutable, label("immutable", "🔷")),
    if(description.starts_with("wip: "), label("wip", "❗")),
    label("normal", "🔘")
  )
)
'''
#log_node = '''
#label("node",
#  coalesce(
#    if(!self, label("elided", "⇋")),
#    if(current_working_copy, label("working_copy", "◉")),
#    if(conflict, label("conflict", "x")),
#    if(immutable, label("immutable", "◆")),
#    if(description.starts_with("wip: "), label("wip", "!")),
#    label("normal", "○")
#  )
#)
#'''

# Draft commit description. Includes:
# - Signed-off-by lines
draft_commit_description = '''
concat(
  coalesce(description, default_commit_description),
  "\n",
  if(
    config("ui.should-sign-off").as_boolean() && !description.contains("Signed-off-by: " ++ author.name()),
    "\n🙌 Signed-off-by: " ++ author.name() ++ " <" ++ author.email() ++ ">",
  ),
  surround(
    "\nJJ: This commit contains the following changes:\n", "",
    indent("JJ:     ", diff.summary()),
  ),
)
'''

[template-aliases]
default_commit_description = '''
 '
JJ: <type>: <summary>
JJ: Example: ✨ feat(login): add OAuth2 support
JJ: -----------------------------------------------------------------------
JJ: ✅ Use one of the following types (with emojis):
JJ  ❗ WIP         - work in progress
JJ: ✨ feat        – new feature
JJ: 🐛 fix         – bug fix
JJ: 📝 docs        – documentation
JJ: 💄 style       – code style (formatting, etc.)
JJ: 📚 refactor    – code refactor without behavior change
JJ: ⚡ perf        – performance improvement
JJ: ✅ test        – adding tests
JJ: 🔧 chore       – build or maintenance task
JJ: 👷 ci          – CI/CD configuration
JJ: ⏪ revert      – reverting commits
JJ:
JJ: 📣 Title: Start with uppercase, no period. Imperative mood (e.g., "Fix", not "Fixed" or "Fixes")
JJ: Max 50 characters — limit is right here:
JJ: ------------------------------------------------
JJ  ❗ wip:
JJ: ✨ feat: 
JJ: 🐛 fix:
JJ: 📝 docs:
JJ: 💄 style:
JJ: 📚 refactor:
JJ: ⚡ perf:
JJ: ✅ test:
JJ: 🔧 chore:
JJ: 👷 ci:
JJ: ⏪ revert"
JJ: ------------------------------------------------
JJ:
JJ: 💡 Leave a blank line between title and body
JJ: 🧾 Body: Explain *what* and *why*, not *how*. Include Jira ID or ticket number if applicable.
JJ: Wrap lines at 72 characters — heres your guide:
JJ: -----------------------------------------------------------------------
JJ: 🧾
JJ: -----------------------------------------------------------------------
JJ: 
JJ: 🙌 Contributors (leave at least one blank line above):
JJ: Co-authored-by: Name <user@users.noreply.github.com>
JJ: 🙌 Co-authored-by:
JJ: 📚 Reference:
JJ: https://chris.beams.io/posts/git-commit
JJ:
JJ: Commit Rules Recap:
JJ: 1. Separate subject from body with a blank line
JJ: 2. Limit subject line to 50 characters
JJ: 3. Capitalize the subject line
JJ: 4. Do not end the subject line with a period
JJ: 5. Use the imperative mood in the subject
JJ: 6. Wrap the body at 72 characters
JJ: 7. Use body to explain what and why, not how
'
'''

"format_detailed_signature(signature)" = """
  if(signature.name(), signature.name(), name_placeholder)
  ++ " <" ++ if(signature.email(), signature.email(), email_placeholder) ++ ">"
  ++ " (" ++ signature.timestamp().local().format("%F %r") ++ ")"
"""
"in_branch(commit)" = 'commit.contained_in("immutable_heads()..bookmarks()")'

# Basic customizations.
'format_short_signature(signature)' = '"<" ++ if(signature.email(), signature.email(), label("text warning", "NO EMAIL")) ++ ">"'
'format_timestamp(ts)' = '"[" ++ ts.ago() ++ "]"'
'render_bookmarks(commit)' = '''
  commit.bookmarks().map(|b|
    if(b.remote(),
      b,
      hyperlink(gh_pr_base() ++ "/tree/" ++ b.name(), b),
    )
  )
'''


# Code to hyperlink something for the terminal.
# FIXME (upstream): should this go upstream?
'hyperlink(url, text)' = '''
  concat(
    raw_escape_sequence("\e]8;;" ++ url ++ "\e\\"),
    label("text link", text),
    raw_escape_sequence("\e]8;;\e\\"),
  )
'''

[dotfiles]
hide-status = 0
